// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/bin/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get binary firmware file with given id. Available for all authenticated users",
                "summary": "Get binary file",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "firmware's ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "401": {
                        "description": "Invalid auth token",
                        "schema": {
                            "$ref": "#/definitions/main.HttpError"
                        }
                    },
                    "404": {
                        "description": "firmware not found",
                        "schema": {
                            "$ref": "#/definitions/main.HttpError"
                        }
                    }
                }
            }
        },
        "/firmwares": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get all firmwares. Only for non-board users",
                "produces": [
                    "application/json"
                ],
                "summary": "Get all firmwares",
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/main.ApiFirmwareResponse"
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid auth token",
                        "schema": {
                            "$ref": "#/definitions/main.HttpError"
                        }
                    },
                    "403": {
                        "description": "Access is denied",
                        "schema": {
                            "$ref": "#/definitions/main.HttpError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get all firmwares. Only for non-board users",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Add firmware information and binary",
                "parameters": [
                    {
                        "description": "firmware info and binary",
                        "name": "firmware",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.ApiAddFirmwareRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "ok",
                        "schema": {
                            "$ref": "#/definitions/main.ApiFirmwareResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid auth token",
                        "schema": {
                            "$ref": "#/definitions/main.HttpError"
                        }
                    },
                    "403": {
                        "description": "Access is denied",
                        "schema": {
                            "$ref": "#/definitions/main.HttpError"
                        }
                    }
                }
            }
        },
        "/firmwares/latest": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get latest firmware version for given repo and tags. Only for boards",
                "produces": [
                    "application/json"
                ],
                "summary": "Get latest firmware version",
                "parameters": [
                    {
                        "type": "string",
                        "description": "name of firmware's repo",
                        "name": "repo",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "$ref": "#/definitions/main.ApiFirmwareResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid auth token",
                        "schema": {
                            "$ref": "#/definitions/main.HttpError"
                        }
                    },
                    "403": {
                        "description": "Access is denied",
                        "schema": {
                            "$ref": "#/definitions/main.HttpError"
                        }
                    },
                    "404": {
                        "description": "no firmware found for this board in repo",
                        "schema": {
                            "$ref": "#/definitions/main.HttpError"
                        }
                    }
                }
            }
        },
        "/users/me": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get authenticated user",
                "produces": [
                    "application/json"
                ],
                "summary": "Get authenticated user",
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "$ref": "#/definitions/main.ApiUserResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid auth token",
                        "schema": {
                            "$ref": "#/definitions/main.HttpError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "main.ApiAddFirmwareInfoRequest": {
            "type": "object",
            "required": [
                "boards",
                "built_at",
                "repo_name"
            ],
            "properties": {
                "boards": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "type": "string"
                    }
                },
                "built_at": {
                    "type": "integer"
                },
                "commit_id": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "repo_name": {
                    "type": "string"
                },
                "sha256": {
                    "type": "string"
                }
            }
        },
        "main.ApiAddFirmwareRequest": {
            "type": "object",
            "required": [
                "bin_base64",
                "info"
            ],
            "properties": {
                "bin_base64": {
                    "type": "string"
                },
                "info": {
                    "$ref": "#/definitions/main.ApiAddFirmwareInfoRequest"
                }
            }
        },
        "main.ApiFirmwareInfoResponse": {
            "type": "object",
            "properties": {
                "boards": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "built_at": {
                    "type": "integer"
                },
                "commit_id": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "loaded_at": {
                    "type": "integer"
                },
                "loaded_by": {
                    "type": "string"
                },
                "repo_name": {
                    "type": "string"
                },
                "sha256": {
                    "type": "string"
                },
                "size": {
                    "type": "integer"
                }
            }
        },
        "main.ApiFirmwareResponse": {
            "type": "object",
            "properties": {
                "bin_url": {
                    "type": "string"
                },
                "info": {
                    "$ref": "#/definitions/main.ApiFirmwareInfoResponse"
                }
            }
        },
        "main.ApiUserResponse": {
            "type": "object",
            "properties": {
                "is_board": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "main.HttpError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "X-Token",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "OTA server",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
